{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH prototype\\\\Frontend\\\\src\\\\components\\\\ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport { Navigate, useLocation, useParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  allowedRoles\n}) {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const location = useLocation();\n  const {\n    userType\n  } = useParams();\n  if (!isAuthenticated || !user) {\n    // Redirect to login if not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/user-type\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the user's role has access to this route\n  const hasRequiredRole = allowedRoles ? allowedRoles.includes(user.role) : true;\n  const isMatchingRoute = !userType || user.role === userType;\n  if (!hasRequiredRole || !isMatchingRoute) {\n    // Redirect to the appropriate dashboard if user doesn't have access\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/dashboard/${user.role}`,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n}\n_s(ProtectedRoute, \"gWB/rnrfAW6dfRwkzAIaEEbev54=\", false, function () {\n  return [useAuth, useLocation, useParams];\n});\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","useLocation","useParams","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","_s","user","isAuthenticated","location","userType","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","hasRequiredRole","includes","role","isMatchingRoute","_c","$RefreshReg$"],"sources":["D:/SIH prototype/Frontend/src/components/ProtectedRoute.tsx"],"sourcesContent":["import { Navigate, useLocation, useParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\ntype ProtectedRouteProps = {\n  children: JSX.Element;\n  allowedRoles?: string[];\n};\n\nexport default function ProtectedRoute({ children, allowedRoles }: ProtectedRouteProps) {\n  const { user, isAuthenticated } = useAuth();\n  const location = useLocation();\n  const { userType } = useParams<{ userType?: string }>();\n\n  if (!isAuthenticated || !user) {\n    // Redirect to login if not authenticated\n    return <Navigate to=\"/user-type\" state={{ from: location }} replace />;\n  }\n\n  // Check if the user's role has access to this route\n  const hasRequiredRole = allowedRoles ? allowedRoles.includes(user.role) : true;\n  const isMatchingRoute = !userType || user.role === userType;\n\n  if (!hasRequiredRole || !isMatchingRoute) {\n    // Redirect to the appropriate dashboard if user doesn't have access\n    return <Navigate to={`/dashboard/${user.role}`} replace />;\n  }\n\n  return children;\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACnE,SAASC,OAAO,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOlD,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAkC,CAAC,EAAE;EAAAC,EAAA;EACtF,MAAM;IAAEC,IAAI;IAAEC;EAAgB,CAAC,GAAGR,OAAO,CAAC,CAAC;EAC3C,MAAMS,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEY;EAAS,CAAC,GAAGX,SAAS,CAAwB,CAAC;EAEvD,IAAI,CAACS,eAAe,IAAI,CAACD,IAAI,EAAE;IAC7B;IACA,oBAAOL,OAAA,CAACL,QAAQ;MAACc,EAAE,EAAC,YAAY;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEJ;MAAS,CAAE;MAACK,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACxE;;EAEA;EACA,MAAMC,eAAe,GAAGd,YAAY,GAAGA,YAAY,CAACe,QAAQ,CAACb,IAAI,CAACc,IAAI,CAAC,GAAG,IAAI;EAC9E,MAAMC,eAAe,GAAG,CAACZ,QAAQ,IAAIH,IAAI,CAACc,IAAI,KAAKX,QAAQ;EAE3D,IAAI,CAACS,eAAe,IAAI,CAACG,eAAe,EAAE;IACxC;IACA,oBAAOpB,OAAA,CAACL,QAAQ;MAACc,EAAE,EAAE,cAAcJ,IAAI,CAACc,IAAI,EAAG;MAACP,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5D;EAEA,OAAOd,QAAQ;AACjB;AAACE,EAAA,CApBuBH,cAAc;EAAA,QACFH,OAAO,EACxBF,WAAW,EACPC,SAAS;AAAA;AAAAwB,EAAA,GAHRpB,cAAc;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}