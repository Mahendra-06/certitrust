{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH prototype\\\\Frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Key for storing users in localStorage\nconst USERS_STORAGE_KEY = 'registered_users';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Initialize users in localStorage if not exists\n  useEffect(() => {\n    if (!localStorage.getItem(USERS_STORAGE_KEY)) {\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify([]));\n    }\n\n    // Check for logged in user\n    const storedUser = localStorage.getItem('current_user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Failed to parse user data from localStorage', error);\n        localStorage.removeItem('current_user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  const getUsers = () => {\n    const users = localStorage.getItem(USERS_STORAGE_KEY);\n    return users ? JSON.parse(users) : [];\n  };\n  const login = async (email, password) => {\n    console.log('AuthContext: Login attempt for email:', email);\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Simulate API call\n      console.log('AuthContext: Simulating API call...');\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const users = getUsers();\n      console.log('AuthContext: Found users in storage:', users);\n      const emailExists = users.some(u => u.email === email);\n      console.log('AuthContext: Email exists check:', {\n        email,\n        emailExists\n      });\n      if (!emailExists) {\n        const errorMsg = 'This email is not registered. Please register first.';\n        console.log('AuthContext:', errorMsg);\n        return {\n          success: false,\n          message: errorMsg\n        };\n      }\n      const existingUser = users.find(u => u.email === email && u.password === password);\n      console.log('AuthContext: Password check result:', {\n        userFound: !!existingUser\n      });\n      if (!existingUser) {\n        const errorMsg = 'Invalid password. Please try again.';\n        console.log('AuthContext:', errorMsg);\n        return {\n          success: false,\n          message: errorMsg\n        };\n      }\n      setUser(existingUser);\n      localStorage.setItem('current_user', JSON.stringify(existingUser));\n      return {\n        success: true,\n        message: 'Login successful'\n      };\n    } catch (err) {\n      console.error('Login error:', err);\n      return {\n        success: false,\n        message: 'An error occurred during login. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const users = getUsers();\n\n      // Check if user already exists\n      const userExists = users.some(u => u.email === userData.email);\n      if (userExists) {\n        return {\n          success: false,\n          message: 'Email already registered. Please log in instead.'\n        };\n      }\n      const newUser = {\n        ...userData,\n        id: Date.now().toString()\n      };\n\n      // Save new user to registered users\n      const updatedUsers = [...users, newUser];\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(updatedUsers));\n\n      // Log the user in\n      setUser(newUser);\n      localStorage.setItem('current_user', JSON.stringify(newUser));\n      return {\n        success: true,\n        message: 'Registration successful! You are now logged in.'\n      };\n    } catch (err) {\n      console.error('Registration error:', err);\n      return {\n        success: false,\n        message: 'An error occurred during registration. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('current_user');\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated: !!user,\n      isLoading,\n      error,\n      login,\n      register,\n      logout\n    },\n    children: !isLoading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"IUiUaaA40XQn0M3q8Pq2fGHPthU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","undefined","USERS_STORAGE_KEY","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","error","setError","navigate","localStorage","getItem","setItem","JSON","stringify","storedUser","parse","console","removeItem","getUsers","users","login","email","password","log","Promise","resolve","setTimeout","emailExists","some","u","errorMsg","success","message","existingUser","find","userFound","err","register","userData","userExists","newUser","id","Date","now","toString","updatedUsers","logout","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/SIH prototype/Frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  password: string;\n  organization?: string;\n  phone?: string;\n  avatar?: string; // Add optional avatar property\n};\n\ntype AuthContextType = {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<{ success: boolean; message: string }>;\n  register: (userData: Omit<User, 'id'>) => Promise<{ success: boolean; message: string }>;\n  logout: () => void;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Key for storing users in localStorage\nconst USERS_STORAGE_KEY = 'registered_users';\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  // Initialize users in localStorage if not exists\n  useEffect(() => {\n    if (!localStorage.getItem(USERS_STORAGE_KEY)) {\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify([]));\n    }\n    \n    // Check for logged in user\n    const storedUser = localStorage.getItem('current_user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Failed to parse user data from localStorage', error);\n        localStorage.removeItem('current_user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const getUsers = (): User[] => {\n    const users = localStorage.getItem(USERS_STORAGE_KEY);\n    return users ? JSON.parse(users) : [];\n  };\n\n  const login = async (email: string, password: string) => {\n    console.log('AuthContext: Login attempt for email:', email);\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      // Simulate API call\n      console.log('AuthContext: Simulating API call...');\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const users = getUsers();\n      console.log('AuthContext: Found users in storage:', users);\n      \n      const emailExists = users.some((u: User) => u.email === email);\n      console.log('AuthContext: Email exists check:', { email, emailExists });\n      \n      if (!emailExists) {\n        const errorMsg = 'This email is not registered. Please register first.';\n        console.log('AuthContext:', errorMsg);\n        return { \n          success: false, \n          message: errorMsg\n        };\n      }\n      \n      const existingUser = users.find(\n        (u: User) => u.email === email && u.password === password\n      );\n      console.log('AuthContext: Password check result:', { userFound: !!existingUser });\n\n      if (!existingUser) {\n        const errorMsg = 'Invalid password. Please try again.';\n        console.log('AuthContext:', errorMsg);\n        return { \n          success: false, \n          message: errorMsg\n        };\n      }\n\n      setUser(existingUser);\n      localStorage.setItem('current_user', JSON.stringify(existingUser));\n      \n      return { success: true, message: 'Login successful' };\n    } catch (err) {\n      console.error('Login error:', err);\n      return { \n        success: false, \n        message: 'An error occurred during login. Please try again.' \n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: Omit<User, 'id'>) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const users = getUsers();\n      \n      // Check if user already exists\n      const userExists = users.some((u: User) => u.email === userData.email);\n      if (userExists) {\n        return { \n          success: false, \n          message: 'Email already registered. Please log in instead.' \n        };\n      }\n      \n      const newUser: User = {\n        ...userData,\n        id: Date.now().toString(),\n      };\n      \n      // Save new user to registered users\n      const updatedUsers = [...users, newUser];\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(updatedUsers));\n      \n      // Log the user in\n      setUser(newUser);\n      localStorage.setItem('current_user', JSON.stringify(newUser));\n      \n      return { \n        success: true, \n        message: 'Registration successful! You are now logged in.' \n      };\n    } catch (err) {\n      console.error('Registration error:', err);\n      return { \n        success: false, \n        message: 'An error occurred during registration. Please try again.' \n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('current_user');\n    navigate('/');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        isLoading,\n        error,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {!isLoading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAuB/C,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;;AAEzE;AACA,MAAMC,iBAAiB,GAAG,kBAAkB;AAE5C,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMiB,QAAQ,GAAGf,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACiB,YAAY,CAACC,OAAO,CAACZ,iBAAiB,CAAC,EAAE;MAC5CW,YAAY,CAACE,OAAO,CAACb,iBAAiB,EAAEc,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC7D;;IAEA;IACA,MAAMC,UAAU,GAAGL,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAII,UAAU,EAAE;MACd,IAAI;QACFX,OAAO,CAACS,IAAI,CAACG,KAAK,CAACD,UAAU,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdU,OAAO,CAACV,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;QACnEG,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;MACzC;IACF;IACAZ,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,QAAQ,GAAGA,CAAA,KAAc;IAC7B,MAAMC,KAAK,GAAGV,YAAY,CAACC,OAAO,CAACZ,iBAAiB,CAAC;IACrD,OAAOqB,KAAK,GAAGP,IAAI,CAACG,KAAK,CAACI,KAAK,CAAC,GAAG,EAAE;EACvC,CAAC;EAED,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACvDN,OAAO,CAACO,GAAG,CAAC,uCAAuC,EAAEF,KAAK,CAAC;IAC3D,IAAI;MACFhB,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACAS,OAAO,CAACO,GAAG,CAAC,qCAAqC,CAAC;MAClD,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,MAAMN,KAAK,GAAGD,QAAQ,CAAC,CAAC;MACxBF,OAAO,CAACO,GAAG,CAAC,sCAAsC,EAAEJ,KAAK,CAAC;MAE1D,MAAMQ,WAAW,GAAGR,KAAK,CAACS,IAAI,CAAEC,CAAO,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,CAAC;MAC9DL,OAAO,CAACO,GAAG,CAAC,kCAAkC,EAAE;QAAEF,KAAK;QAAEM;MAAY,CAAC,CAAC;MAEvE,IAAI,CAACA,WAAW,EAAE;QAChB,MAAMG,QAAQ,GAAG,sDAAsD;QACvEd,OAAO,CAACO,GAAG,CAAC,cAAc,EAAEO,QAAQ,CAAC;QACrC,OAAO;UACLC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEF;QACX,CAAC;MACH;MAEA,MAAMG,YAAY,GAAGd,KAAK,CAACe,IAAI,CAC5BL,CAAO,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QACnD,CAAC;MACDN,OAAO,CAACO,GAAG,CAAC,qCAAqC,EAAE;QAAEY,SAAS,EAAE,CAAC,CAACF;MAAa,CAAC,CAAC;MAEjF,IAAI,CAACA,YAAY,EAAE;QACjB,MAAMH,QAAQ,GAAG,qCAAqC;QACtDd,OAAO,CAACO,GAAG,CAAC,cAAc,EAAEO,QAAQ,CAAC;QACrC,OAAO;UACLC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAEF;QACX,CAAC;MACH;MAEA3B,OAAO,CAAC8B,YAAY,CAAC;MACrBxB,YAAY,CAACE,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACoB,YAAY,CAAC,CAAC;MAElE,OAAO;QAAEF,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAmB,CAAC;IACvD,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZpB,OAAO,CAACV,KAAK,CAAC,cAAc,EAAE8B,GAAG,CAAC;MAClC,OAAO;QACLL,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,SAAS;MACR3B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMgC,QAAQ,GAAG,MAAOC,QAA0B,IAAK;IACrD,IAAI;MACFjC,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAM,IAAIiB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,MAAMN,KAAK,GAAGD,QAAQ,CAAC,CAAC;;MAExB;MACA,MAAMqB,UAAU,GAAGpB,KAAK,CAACS,IAAI,CAAEC,CAAO,IAAKA,CAAC,CAACR,KAAK,KAAKiB,QAAQ,CAACjB,KAAK,CAAC;MACtE,IAAIkB,UAAU,EAAE;QACd,OAAO;UACLR,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;MACH;MAEA,MAAMQ,OAAa,GAAG;QACpB,GAAGF,QAAQ;QACXG,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;MAC1B,CAAC;;MAED;MACA,MAAMC,YAAY,GAAG,CAAC,GAAG1B,KAAK,EAAEqB,OAAO,CAAC;MACxC/B,YAAY,CAACE,OAAO,CAACb,iBAAiB,EAAEc,IAAI,CAACC,SAAS,CAACgC,YAAY,CAAC,CAAC;;MAErE;MACA1C,OAAO,CAACqC,OAAO,CAAC;MAChB/B,YAAY,CAACE,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC2B,OAAO,CAAC,CAAC;MAE7D,OAAO;QACLT,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZpB,OAAO,CAACV,KAAK,CAAC,qBAAqB,EAAE8B,GAAG,CAAC;MACzC,OAAO;QACLL,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,SAAS;MACR3B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMyC,MAAM,GAAGA,CAAA,KAAM;IACnB3C,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;IACvCT,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAACmD,QAAQ;IACnBC,KAAK,EAAE;MACL9C,IAAI;MACJ+C,eAAe,EAAE,CAAC,CAAC/C,IAAI;MACvBE,SAAS;MACTE,KAAK;MACLc,KAAK;MACLiB,QAAQ;MACRS;IACF,CAAE;IAAA9C,QAAA,EAED,CAACI,SAAS,IAAIJ;EAAQ;IAAAkD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAE3B,CAAC;AAACpD,EAAA,CAxJWF,YAA+C;EAAA,QAIzCN,WAAW;AAAA;AAAA6D,EAAA,GAJjBvD,YAA+C;AA0J5D,OAAO,MAAMwD,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGnE,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI6D,OAAO,KAAK5D,SAAS,EAAE;IACzB,MAAM,IAAI6D,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}